branches:
  - '+([0-9])?(.{+([0-9]),x}).x'
  - master
  - name: beta
    prerelease: true
ci: true
repositoryUrl: "https://github.com/lkadalski/minigun.git"
debug: true
dryRun: false
# Global plugin options (will be passed to all plugins)
preset: "conventionalcommits"
tagFormat: "v${version}"
plugins:
  - "@semantic-release/commit-analyzer"
  - "@semantic-release/release-notes-generator"
  - "@semantic-release/changelog"
  - "@semantic-release/git"
  - "@semantic-release/github"
  - "@semantic-release/exec"
  
# Responsible for verifying conditions necessary to proceed with the release:
# configuration is correct, authentication tokens are valid, etc...
verifyConditions:
  # Verify the presence and the validity of the Git authentication
  # and release configuration
  - '@semantic-release/git'
  # Verify the presence and the validity of the GitLab authentication
  # and release configuration
  - "@semantic-release/github"
  # Verify the presence and the validity of the configuration
  - "@semantic-release/changelog"


# Responsible for determining the type of the next release (major, minor or patch).
# If multiple plugins with a analyzeCommits step are defined, the release type will be
# the highest one among plugins output.
# Look details at: https://github.com/semantic-release/commit-analyzer#configuration
analyzeCommits:
  - path: "@semantic-release/commit-analyzer"
    releaseRules:
      - breaking: true
        release: major
      - type: build     # Changes that affect the build system or external dependencies
        # (example scopes: gulp, broccoli, npm)
        release: patch
      - type: chore     # Other changes that don't modify src or test files
        release: false
      - type: ci        # Changes to our CI configuration files and scripts
        release: false
      - type: docs      # Documentation only changes
        release: false
      - type: feat      # A new feature
        release: minor
      - type: fix       # A bug fix
        release: patch
      - type: perf      # A code change that improves performance
        release: patch
      - type: refactor  # A code change that neither fixes a bug nor adds a feature
        release: false
      - type: revert    # Reverts a previous commit
        release: patch
      - type: style     # Changes that do not affect the meaning of the code
        # (white-space, formatting, missing semi-colons, etc)
        release: false
      - type: test      # Adding missing tests or correcting existing tests
        release: false

# Responsible for generating the content of the release notes.
# If multiple plugins with a generateNotes step are defined,
# the release notes will be the result of the concatenation of each plugin output.
generateNotes:
  - path: "@semantic-release/release-notes-generator"
    # detect GitHub issues in merge commits
    parserOpts:
      issuePrefixes: ['#']
      noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES']
    writerOpts:
      groupBy: 'type'
      commitGroupsSort: 'title'
      commitsSort: 'header'
    linkCompare: true
    linkReferences: true
    presetConfig:
      types:  # looks like it only works with 'conventionalcommits' preset
        - type: 'build'
          section: 'ü¶ä CI/CD'
          hidden: false
        - type: 'chore'
          section: 'Other'
          hidden: true
        - type: 'ci'
          section: 'ü¶ä CI/CD'
          hidden: true
        - type: 'docs'
          section: 'üìî Docs'
          hidden: false
        - type: 'example'
          section: 'üìù Examples'
          hidden: true
        - type: 'feat'
          section: 'üöÄ Features'
          hidden: false
        - type: 'fix'
          section: 'üõ† Fixes'
          hidden: false
        - type: 'perf'
          section: '‚è© Performance'
        - type: 'refactor'
          section: ':scissors: Refactor'
          hidden: false
        - type: 'revert'
          section: 'üôÖ‚Äç‚ôÇÔ∏è Reverts'
        - type: 'style'
          section: 'üíà Style'
        - type: 'test'
          section: 'üß™ Tests'
          hidden: true

# Responsible for preparing the release, for example creating or updating files
# such as package.json, CHANGELOG.md, documentation or compiled assets
# and pushing a commit.
prepare:
    # Update version in Cargo.toml
  - path: "@semantic-release/exec"
    cmd: "NEXTVERSION=${nextRelease.version} .github/bump_version.sh"
    # Create or update the changelog file in the local project repository
  - path: "@semantic-release/changelog"
    changelogFile: "docs/CHANGELOG.md"

    # Push a release commit and tag, including configurable files
  - path: "@semantic-release/git"
    assets:
      - 'Cargo.toml'
      - 'docs/CHANGELOG.md'
    message: "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"

# Responsible for publishing the release.
publish:
  - path: "@semantic-release/github"
    assets: 'publish/**'

success:
  - "@semantic-release/github"

fail:
  - "@semantic-release/github"
